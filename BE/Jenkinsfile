pipeline {
    agent any

    environment {
        MATTERMOST_WEBHOOK = "https://meeting.ssafy.com/hooks/kd8p46dntiys5xc9tukqedt9jr"
        IMAGE_NAME = "daum4572/s12p21e106"
        TAG = "latest"
        CONTAINER_NAME = "s12p21e106-backend"
        WORKSPACE_DIR = "BE"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        url: 'https://lab.ssafy.com/s12-fintech-finance-sub1/S12P21E106.git',
                        credentialsId: 'gitlab-credentials'
                    ]]
                ])

                // Git 상태 업데이트는 clone 후에 실행
                updateGitlabCommitStatus name: 'build', state: 'pending'
            }
        }

        stage('Build') {
            steps {
                dir("${WORKSPACE_DIR}") {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build -x test"
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    dir("${WORKSPACE_DIR}") {
                        sh "docker build -t ${IMAGE_NAME}:${TAG} ."
                    }

                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        '''
                    }

                    sh "docker push ${IMAGE_NAME}:${TAG}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh """
                        docker container rm -f ${CONTAINER_NAME} || true
                        docker image rm -f ${IMAGE_NAME}:${TAG} || true
                        docker rmi -f \$(docker images -f "dangling=true" -q) || true
                        docker pull ${IMAGE_NAME}:${TAG}
                        docker network inspect s12p21e106-network >/dev/null 2>&1 || docker network create s12p21e106-network
                        docker run -d \
                            --name ${CONTAINER_NAME} \
                            -p 8082:8080 \
                            --network s12p21e106-network \
                            -v /home/ubuntu/Project/S12P21E106/BE/config:/config \
                            -e SPRING_CONFIG_LOCATION=file:/config/application.yml \
                            ${IMAGE_NAME}:${TAG}
                    """
                }
            }
        }

    }

    post {
        success {
            script {
                sh '''
                curl -X POST -H 'Content-Type: application/json' --data '{
                    "text": "✅ [Spring Boot] Jenkins Build & Deployment Success! 🎉\n🔹 프로젝트: S12P21E106\n🔹 서비스: Backend (Spring Boot + Docker)\n🔹 상태: 성공 ✅"
                }' ${MATTERMOST_WEBHOOK}
                '''
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        failure {
            script {
                sh '''
                curl -X POST -H 'Content-Type: application/json' --data '{
                    "text": "❌ [Spring Boot] Jenkins Build Failed! 🔥\n🔹 프로젝트: S12P21E106\n🔹 서비스: Backend (Spring Boot + Docker)\n🔹 상태: 실패 ❌"
                }' ${MATTERMOST_WEBHOOK}
                '''
                updateGitlabCommitStatus name: 'build', state: 'failed'
            }
        }
    }
}
